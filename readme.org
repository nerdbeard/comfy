* Intro
I want to put together a complete 6502 environment in elisp.

Features:
- simulate multiple systems concurrently
- simulate common 65-series hardware environments and chips
- assemble source code into ROMs and other images
- emulate 6502, 6522, etc to run and debug code

Simulation goals:
- Two 6502s communicating via a serial interface (6522?)
- A group of 6502s communicating via packet radio

Interesting chips:
- 6522 VIA 2 port parellel and 2-timer
- 6552 RIOT (RAM I/O Timer) w/128 bytes RAM as found on 2600
* Components
** Architecture
Ideally a flexible system but initially a simple fixed system maybe with RIOT or VIA and SRAM
** Emulator
6502 to be provided by emacs-nes
Bus emulation and 65xx series chip emulators to be written
** Assembler
To be provided by or modelled after COMFY
** Disassembler
To be written

Decompile to COMFY?  maybe not possible.  In that case, the assembler can't really be COMFY either, we need another one to do round trip from the disassembler to editor to assembler to code back to disassembler.

Actually, no!  COMFY compiles to a parsed assembly format, for example:
#+BEGIN_EXAMPLE lisp
(compile-code (3 (1+ 100)))
  ((INC :ZERO-PAGE) (:ZERO-PAGE 100) 
   (INC :ZERO-PAGE) (:ZERO-PAGE 100) 
   (INC :ZERO-PAGE) (:ZERO-PAGE 100))
#+END_EXAMPLE
..which could totally be used as the dissassembly format.  Perfect!
** Monitor/debugger
To be written
* References
- https://github.com/gongo/emacs-nes includes a 6502 emulator!
- https://www.atarimax.com/jindroush.atari.org/achip.html chips in the Atari
** Comfy
- http://home.pipeline.com/~hbaker1/sigplannotices/COMFY.TXT
- http://home.pipeline.com/~hbaker1/sigplannotices/sigcol03.pdf
- http://home.pipeline.com/~hbaker1/sigplannotices/sigcol04.pdf
- http://home.pipeline.com/Ëœhbaker1/lisp/cfycmp.lsp: Link broken but see [[file:CFYCMP.LSP][local copy]] and an [[file:CFYCMP1.LSP][alternate version]] that seems to be from a slightly later period
* [[file:comfy.el][comfy.el]]
This is my version of COMFY-65 ported to modern elisp and without the namespace pollution.  I used this to clean it up from the original:
#+BEGIN_SRC emacs-lisp
  (defun comfify (sym)
    (interactive "SSymbol: ")
    (replace-regexp (format "\\b%s\\b" sym)
		    (format "comfy-%s" sym)))a
#+END_SRC
It still uses a bunch of globals for state and should be given a proper data structure if it is going to be used.  It's questionable how useful it actually is and may merely serve as a model for my own version.  Also, what is the license?

Dang it, the license is [[https://www.acm.org/publications/policies/software-copyright-notice][not that great]].  I think I need to write an assembler, but I think I am allowed to use COMFY as a model.  Clearly my work so far is a derived work though and will need to be removed prior to distribution.
* emacs-nes
Just to demonstrate that the 6502 emulator works
#+BEGIN_SRC sh
  hg clone git+https://github.com/gongo/emacs-nes
#+END_SRC
#+BEGIN_SRC elisp :results silent
  (add-to-list 'load-path (concat default-directory "emacs-nes"))
  (load "nes.el")
  "Loaded emacs-nes"
#+END_SRC
Tetris sourced from http://www.nesfiles.com/NES/Tetris/Tetris.nes
#+BEGIN_SRC elisp :results silent
  (nes "Tetris.nes")
#+END_SRC
* Scratch
#+BEGIN_SRC elisp
  ;; Create an environment
  (e65-system
   (e65-design ...)
   ;; Design would have some named slots that are filled by e65-system
   ;; like so:
   '((high-rom . rom)
     (prog-rom . program)
     (config-eeprom . config)))

  (e65-design
   ;; - A CPU
   ;; - 0 or more VIAs
   ;;  - Okay but what about the stuff that attaches to that?  Stuff with
   ;;    persistent state maybe?
   ;; - 0 or more banks of SRAM
   ;; - 0 or more ROMs
   ;;  - Can it take a default rom or is it only specified at the e65-system 
   ;;    level?
   ;; - 0 or more EEPROMs?
   )
#+END_SRC
* COMMENT Config
# Local Variables:
# truncate-lines: nil
# word-wrap: t
# End:
